services:
  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - ./movielens:/movielens
      - mongodb_data:/data/db  

  flask_api:
    build:
      context: ./mongodb_dw
      dockerfile: Dockerfile  
    container_name: flask_api
    ports:
      - "5000:5000"
    depends_on:
      - mongodb

  frontend:
    build:
      context: ./frontend 
    container_name: frontend
    ports:
      - "8000:8000"
    depends_on:
      - flask_api
      - supabase_api
      - neo4j_api

  postgres_supabase:
    image: postgres:15
    container_name: postgres_supabase
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: evtoqEb6YUflIeC0
      POSTGRES_DB: postgres
      # Add these to enable network connections
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_INITDB_ARGS: "--data-checksums"
    ports:
      - "5432:5432"
    volumes:
      - pgdata_supabase:/var/lib/postgresql/data
      - ./movielens:/movielens
    # Simpler healthcheck
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
      
  supabase_api:
    build:
      context: ./supabase_dw
      dockerfile: Dockerfile
    container_name: supabase_api
    networks:
      default:
        aliases:
          - supabase_backend
    depends_on:
      postgres_supabase:
        condition: service_healthy
    environment:
      SUPABASE_DB_HOST: postgres_supabase
      SUPABASE_DB_NAME: postgres
      SUPABASE_DB_USER: postgres
      SUPABASE_DB_PASSWORD: evtoqEb6YUflIeC0
      SUPABASE_DB_PORT: 5432
      LOAD_DATA: "true"
    volumes:
      - ./movielens:/app/movielens
    ports:
      - "5050:5050"
    # Add healthcheck for supabase_api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5050/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    
  
# 4) Actual Neo4j database (the official DB image)
  neo4j:
    image: neo4j:5.5
    container_name: neo4j
    environment:
      # set user/pass here or use NEO4J_AUTH
      NEO4J_AUTH: "neo4j/password"
    ports:
      - "7474:7474"  # Browser
      - "7687:7687"  # Bolt port for driver

  # ─────────────────────────────────────────────────────────
  # 5) Your Neo4j-based Flask API (build from your neo4j folder)
  neo4j_api:
    build:
      context: ./neo4j
      dockerfile: Dockerfile  # the Dockerfile in the neo4j folder
    container_name: neo4j_api
    ports:
      - "6060:6060"  # Expose port 6060 for Flask
    depends_on:
      - neo4j

  zookeeper:
      image: confluentinc/cp-zookeeper:latest
      ports:
        - "2181:2181"
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
      

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://10.0.0.4:29092 #Change to your ip address
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka_mongo_consumer:
    build:
      context: ./datastreaming
    container_name: kafka_mongo_consumer
    depends_on:
      - kafka
      - mongodb
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MONGO_URI: mongodb://mongodb:27017/



volumes:
  mongodb_data:
  pgdata_supabase: